#!/usr/bin/env bash
set -e

# This script:
# * moves dist/ to .dist/
# * checks out HEAD as a detached head
# * runs a production build
# * creates a git tag named TAG
# * pushes that tag to github
# * checks out the branch you started on
# * deletes dist/
# * restores .dist/ to dist/

BOWER_COMPONENTS="./bower_components"
BRANCH_NAME_RELEASE="master"
HELPERS_DIR="./scripts/helpers"
LOG_PREFIX="[RELEASE]"
NODE_MODULES="./node_modules"
NODE_BIN="$NODE_MODULES/.bin"
RELEASE_TYPE="$1" # major, minor, patch
OLD_PKG_JSON="$(cat ./package.json)"

function secho {
  echo "$LOG_PREFIX [$(date)] $1"
}

if [ -z "$RELEASE_TYPE" ]; then
  secho "Must provide a relase type to this command ('major', 'minor', or 'patch'), exiting..."
  exit 1
fi

secho "Starting release process..."
BRANCH_NAME="$(git symbolic-ref --short HEAD)"
if [ "$BRANCH_NAME" = "$BRANCH_NAME_RELEASE" ]; then
  secho "On releasable branch '$BRANCH_NAME_RELEASE'"
else
  secho "You are currently on branch '$BRANCH_NAME', please switch to '$BRANCH_NAME_RELEASE' before running this command, exiting..."
  exit 1
fi

function  cleanup_at_exit {
  if [ "$?" = "1" ]; then
    echo "$OLD_PKG_JSON" > ./package.json
  fi
  secho "Resetting local checkout"
  git checkout "$BRANCH_NAME_RELEASE" --quiet
  rm -rf dist/ || true
}
trap cleanup_at_exit EXIT

secho "Check that npm dependencies are in place"
if [ ! -d "$NODE_MODULES" ]; then
  npm install
else
  npm update
fi

secho "Check that bower dependencies are in place"
if [ -d "$BOWER_COMPONENTS" ]; then
  "$NODE_BIN"/bower update
else
  "$NODE_BIN"/bower install
fi

secho "Running tests"
if [ ! "$(npm test)" ]; then
  secho "You cannot release with failing tests, shame on you"
  exit 1
fi

secho "Increasing $RELEASE_TYPE version"
node $HELPERS_DIR/version-up.js ./package.json "$RELEASE_TYPE"
NEW_VERSION="$(node $HELPERS_DIR/version-read.js ./package.json)"

secho "Commiting updated version"
git add package.json
git commit -m "Upddate package version to $NEW_VERSION"

secho "Checking out detached HEAD"
git checkout "$(git rev-parse HEAD)" --quiet

secho "Running scripts/webpack-prod-build"
scripts/webpack-prod-build

secho "Adding dist to detached HEAD"
git add -f 'dist/*'

secho "Tagging and Releasing"
git commit --allow-empty --quiet -m "production build for release tag: $NEW_VERSION"
git tag "$NEW_VERSION"
git push origin "$NEW_VERSION" && git push origin --tags
git checkout "$BRANCH_NAME_RELEASE" && git push origin "$BRANCH_NAME_RELEASE"

node_modules/.bin/onionsay "NEW VERSION: $NEW_VERSION"
